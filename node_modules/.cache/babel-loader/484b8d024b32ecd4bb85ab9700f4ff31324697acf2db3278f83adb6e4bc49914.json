{"ast":null,"code":"var _jsxFileName = \"C:\\\\Misc\\\\Documents\\\\Career\\\\FinTech\\\\BlockChain\\\\FrontEnd\\\\waveportal-starter-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport abi from \"./utils/WavePortal.json\";\nimport { networks } from './utils/networks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const contractAddress = \"0xEf25ba77a2Fb8d5bAEC5B920CB6882cbbfE023cc\";\n  const contractABI = abi.abi;\n  const [allWaves, setAllWaves] = useState([]);\n  const [network, setNetwork] = useState('');\n  const shouldRenderChangeNetworkButton = network !== 'Polygon Mumbai Testnet';\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask -> https://metamask.io/\");\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const account = accounts[0];\n      console.log(\"Connected\", account);\n      setCurrentAccount(account);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) {\n      console.log('Make sure you have MetaMask installed!');\n      return;\n    }\n    try {\n      // Get accounts\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        setCurrentAccount(account);\n      } else {\n        setCurrentAccount('');\n      }\n\n      // Get chainId\n      const chainId = await ethereum.request({\n        method: 'eth_chainId'\n      });\n      setNetwork(networks[chainId]);\n      ethereum.on('chainChanged', handleChainChanged);\n      function handleChainChanged(_chainId) {\n        // Reload the page or update the necessary state when the chain changes\n        window.location.reload();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const switchNetwork = async () => {\n    if (window.ethereum) {\n      try {\n        // Try to switch to the Mumbai testnet\n        await window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: '0x13881'\n          }] // Check networks.js for hexadecimal network ids\n        });\n      } catch (error) {\n        // This error code means that the chain we want has not been added to MetaMask\n        // In this case we ask the user to add it to their MetaMask\n        if (error.code === 4902) {\n          try {\n            await window.ethereum.request({\n              method: 'wallet_addEthereumChain',\n              params: [{\n                chainId: '0x13881',\n                chainName: 'Polygon Mumbai Testnet',\n                rpcUrls: ['https://rpc-mumbai.maticvigil.com/'],\n                nativeCurrency: {\n                  name: \"Mumbai Matic\",\n                  symbol: \"MATIC\",\n                  decimals: 18\n                },\n                blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"]\n              }]\n            });\n          } catch (error) {\n            console.log(error);\n          }\n        }\n        console.log(error);\n      }\n    } else {\n      // If window.ethereum is not found then MetaMask is not installed\n      alert('MetaMask is not installed. Please install it to use this app: https://metamask.io/download.html');\n    }\n  };\n  const wave = async () => {\n    try {\n      const ethereum = window.ethereum;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const string = prompt(\"Enter a message\");\n        const waveTxn = await wavePortalContract.wave(string);\n        console.log(\"Mining...\", waveTxn.hash);\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        alert(\"You have sent a wave!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n      alert(\"You have failed to send a wave!\");\n    }\n  };\n  const RecentWaves = async () => {\n    const {\n      ethereum\n    } = window;\n    try {\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const waves = await wavePortalContract.getAllWaves();\n        const last4Waves = waves.slice(-4);\n        const wavesCleaned = last4Waves.map(wave => {\n          return {\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          };\n        });\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const getAndDisplayAllWaves = async () => {\n    await RecentWaves();\n  };\n  const clearWaves = () => {\n    setAllWaves([]);\n  };\n  useEffect(() => {\n    let wavePortalContract;\n    const onNewWave = (from, timestamp, message) => {\n      console.log(\"NewWave\", from, timestamp, message);\n      setAllWaves(prevState => [...prevState, {\n        address: from,\n        timestamp: new Date(timestamp * 1000),\n        message: message\n      }]);\n    };\n    const initializeContract = async () => {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        wavePortalContract.on(\"NewWave\", onNewWave);\n      }\n    };\n    (async () => {\n      const account = await connectWallet();\n      await initializeContract(); // Initialize contract after getting the account     \n    })();\n\n    return () => {\n      if (wavePortalContract) {\n        wavePortalContract.off(\"NewWave\", onNewWave);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [network]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dataContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: \"\\uD83D\\uDC4B Hey there!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bio\",\n        children: \"My 1st Blockchain Project - Connect your wallet and wave at me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"waveButton\",\n        onClick: wave,\n        children: \"Wave at Me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"waveButton\",\n        onClick: getAndDisplayAllWaves,\n        children: \"Get Recent Waves\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), allWaves.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"waveButton\",\n        onClick: clearWaves,\n        children: \"Clear Waves\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), !currentAccount && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"waveButton\",\n        onClick: connectWallet,\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this), shouldRenderChangeNetworkButton && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connect-wallet-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please connect to Polygon Mumbai Testnet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          onClick: switchNetwork,\n          children: \"Click here to switch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this), allWaves.map((wave, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: \"Gray\",\n          marginTop: \"16px\",\n          padding: \"8px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Address: \", wave.address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Time: \", wave.timestamp.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Message: \", wave.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"uPzCTr+ku370l+UspmpJ6fzCn9I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","abi","networks","jsxDEV","_jsxDEV","App","_s","currentAccount","setCurrentAccount","contractAddress","contractABI","allWaves","setAllWaves","network","setNetwork","shouldRenderChangeNetworkButton","connectWallet","ethereum","window","alert","accounts","request","method","account","console","log","error","checkIfWalletIsConnected","length","chainId","on","handleChainChanged","_chainId","location","reload","switchNetwork","params","code","chainName","rpcUrls","nativeCurrency","name","symbol","decimals","blockExplorerUrls","wave","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","string","prompt","waveTxn","hash","wait","RecentWaves","waves","getAllWaves","last4Waves","slice","wavesCleaned","map","address","waver","timestamp","Date","message","getAndDisplayAllWaves","clearWaves","onNewWave","from","prevState","initializeContract","off","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","index","style","backgroundColor","marginTop","padding","toString","_c","$RefreshReg$"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/waveportal-starter-project/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { ethers } from \"ethers\";\r\nimport abi from \"./utils/WavePortal.json\";\r\nimport { networks } from './utils/networks';\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const contractAddress = \"0xEf25ba77a2Fb8d5bAEC5B920CB6882cbbfE023cc\";\r\n  const contractABI = abi.abi;\r\n  const [allWaves, setAllWaves] = useState([]);\r\n  const [network, setNetwork] = useState('');\r\n  const shouldRenderChangeNetworkButton = network !== 'Polygon Mumbai Testnet';\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask -> https://metamask.io/\");\r\n        return;\r\n      }\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n      \r\n\t  const account = accounts[0];\r\n      console.log(\"Connected\", account);\r\n      setCurrentAccount(account);\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    const { ethereum } = window;\r\n    \r\n    if (!ethereum) {\r\n      console.log('Make sure you have MetaMask installed!');\r\n      return;\r\n    }\r\n    try {\r\n      // Get accounts\r\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n    \r\n      if (accounts.length !== 0) {\r\n      const account = accounts[0];\r\n      setCurrentAccount(account);\r\n      } else {\r\n      setCurrentAccount('');\r\n      }\r\n\r\n      // Get chainId\r\n      const chainId = await ethereum.request({ method: 'eth_chainId' });\r\n      setNetwork(networks[chainId]);\r\n    \r\n      ethereum.on('chainChanged', handleChainChanged);\r\n    \r\n      function handleChainChanged(_chainId) {\r\n      // Reload the page or update the necessary state when the chain changes\r\n      window.location.reload();\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      }\r\n    };\r\n\r\n  const switchNetwork = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n      // Try to switch to the Mumbai testnet\r\n      await window.ethereum.request({\r\n        method: 'wallet_switchEthereumChain',\r\n        params: [{ chainId: '0x13881' }], // Check networks.js for hexadecimal network ids\r\n      });\r\n      } catch (error) {\r\n      // This error code means that the chain we want has not been added to MetaMask\r\n      // In this case we ask the user to add it to their MetaMask\r\n      if (error.code === 4902) {\r\n        try {\r\n        await window.ethereum.request({\r\n          method: 'wallet_addEthereumChain',\r\n          params: [\r\n          {\t\r\n            chainId: '0x13881',\r\n            chainName: 'Polygon Mumbai Testnet',\r\n            rpcUrls: ['https://rpc-mumbai.maticvigil.com/'],\r\n            nativeCurrency: {\r\n              name: \"Mumbai Matic\",\r\n              symbol: \"MATIC\",\r\n              decimals: 18\r\n            },\r\n            blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"]\r\n          },\r\n          ],\r\n        });\r\n        } catch (error) {\r\n        console.log(error);\r\n        }\r\n      }\r\n      console.log(error);\r\n      }\r\n    } else {\r\n      // If window.ethereum is not found then MetaMask is not installed\r\n      alert('MetaMask is not installed. Please install it to use this app: https://metamask.io/download.html');\r\n    } \r\n    }\r\n  \r\n  const wave = async () => {\r\n    try {\r\n      const ethereum = window.ethereum;\r\n\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n        const string = prompt(\"Enter a message\");\r\n        const waveTxn = await wavePortalContract.wave(string);\r\n\r\n        console.log(\"Mining...\", waveTxn.hash);\r\n\r\n        await waveTxn.wait();\r\n        console.log(\"Mined -- \", waveTxn.hash);\r\n        \r\n        alert(\"You have sent a wave!\");\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      alert(\"You have failed to send a wave!\");\r\n    }\r\n  }\r\n\r\n  const RecentWaves = async () => {\r\n    const { ethereum } = window;\r\n  \r\n    try {\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n        const waves = await wavePortalContract.getAllWaves();\r\n        \r\n        const last4Waves = waves.slice(-4);\r\n\r\n        const wavesCleaned = last4Waves.map(wave => {\r\n          return {\r\n            address: wave.waver,\r\n            timestamp: new Date(wave.timestamp * 1000),\r\n            message: wave.message,\r\n          };\r\n        });\r\n  \r\n        setAllWaves(wavesCleaned);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  \r\n  const getAndDisplayAllWaves = async () => {\r\n    await RecentWaves();\r\n  };\r\n\r\n  const clearWaves = () => {\r\n    setAllWaves([]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let wavePortalContract;\r\n  \r\n    const onNewWave = (from, timestamp, message) => {\r\n      console.log(\"NewWave\", from, timestamp, message);\r\n      setAllWaves(prevState => [\r\n        ...prevState,\r\n        {\r\n          address: from,\r\n          timestamp: new Date(timestamp * 1000),\r\n          message: message,\r\n        },\r\n      ]);\r\n    };\r\n  \r\n    const initializeContract = async () => {\r\n      if (window.ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n  \r\n        wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n        wavePortalContract.on(\"NewWave\", onNewWave);\r\n      }\r\n    };\r\n  \r\n    (async () => {\r\n      const account = await connectWallet();\r\n      await initializeContract(); // Initialize contract after getting the account     \r\n    })();\r\n  \r\n    return () => {\r\n      if (wavePortalContract) {\r\n        wavePortalContract.off(\"NewWave\", onNewWave);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n  }, [network]);\r\n  \r\n\r\n  return (\r\n    <div className=\"mainContainer\">\r\n      <div className=\"dataContainer\">\r\n        <div className=\"header\">\r\n          👋 Hey there!\r\n        </div>\r\n  \r\n        <div className=\"bio\">\r\n          My 1st Blockchain Project - Connect your wallet and wave at me\r\n        </div>\r\n  \r\n        <button className=\"waveButton\" onClick={wave}>\r\n          Wave at Me\r\n        </button>\r\n  \r\n        <button className=\"waveButton\" onClick={getAndDisplayAllWaves}>\r\n          Get Recent Waves\r\n        </button>\r\n\r\n        {allWaves.length > 0 && (\r\n          <button className=\"waveButton\" onClick={clearWaves}>\r\n            Clear Waves\r\n          </button>\r\n        )}\r\n  \r\n        {!currentAccount && (\r\n          <button className=\"waveButton\" onClick={connectWallet}>\r\n            Connect Wallet\r\n          </button>\r\n        )}\r\n\r\n        {shouldRenderChangeNetworkButton && (\r\n          <div className=\"connect-wallet-container\">\r\n            <p>Please connect to Polygon Mumbai Testnet</p>\r\n            <button className='cta-button mint-button' onClick={switchNetwork}>\r\n              Click here to switch\r\n            </button>\r\n          </div>\r\n        )}\r\n  \r\n        {allWaves.map((wave, index) => (\r\n          <div key={index} style={{ backgroundColor: \"Gray\", marginTop: \"16px\", padding: \"8px\" }}>\r\n            <div>Address: {wave.address}</div>\r\n            <div>Time: {wave.timestamp.toString()}</div>\r\n            <div>Message: {wave.message}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,GAAG,MAAM,yBAAyB;AACzC,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAMU,eAAe,GAAG,4CAA4C;EACpE,MAAMC,WAAW,GAAGT,GAAG,CAACA,GAAG;EAC3B,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMgB,+BAA+B,GAAGF,OAAO,KAAK,wBAAwB;EAE5E,MAAMG,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAM;QAAEC;MAAS,CAAC,GAAGC,MAAM;MAE3B,IAAI,CAACD,QAAQ,EAAE;QACbE,KAAK,CAAC,sCAAsC,CAAC;QAC7C;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMH,QAAQ,CAACI,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC;MAE7E,MAAMC,OAAO,GAAGH,QAAQ,CAAC,CAAC,CAAC;MACxBI,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEF,OAAO,CAAC;MACjCf,iBAAiB,CAACe,OAAO,CAAC;IAC5B,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACpB;EACF,CAAC;EAED,MAAMC,wBAAwB,GAAG,MAAAA,CAAA,KAAY;IAC3C,MAAM;MAAEV;IAAS,CAAC,GAAGC,MAAM;IAE3B,IAAI,CAACD,QAAQ,EAAE;MACbO,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;MACrD;IACF;IACA,IAAI;MACF;MACA,MAAML,QAAQ,GAAG,MAAMH,QAAQ,CAACI,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAe,CAAC,CAAC;MAEnE,IAAIF,QAAQ,CAACQ,MAAM,KAAK,CAAC,EAAE;QAC3B,MAAML,OAAO,GAAGH,QAAQ,CAAC,CAAC,CAAC;QAC3BZ,iBAAiB,CAACe,OAAO,CAAC;MAC1B,CAAC,MAAM;QACPf,iBAAiB,CAAC,EAAE,CAAC;MACrB;;MAEA;MACA,MAAMqB,OAAO,GAAG,MAAMZ,QAAQ,CAACI,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAc,CAAC,CAAC;MACjER,UAAU,CAACZ,QAAQ,CAAC2B,OAAO,CAAC,CAAC;MAE7BZ,QAAQ,CAACa,EAAE,CAAC,cAAc,EAAEC,kBAAkB,CAAC;MAE/C,SAASA,kBAAkBA,CAACC,QAAQ,EAAE;QACtC;QACAd,MAAM,CAACe,QAAQ,CAACC,MAAM,CAAC,CAAC;MACxB;IACF,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IAClB;EACF,CAAC;EAEH,MAAMS,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAIjB,MAAM,CAACD,QAAQ,EAAE;MACnB,IAAI;QACJ;QACA,MAAMC,MAAM,CAACD,QAAQ,CAACI,OAAO,CAAC;UAC5BC,MAAM,EAAE,4BAA4B;UACpCc,MAAM,EAAE,CAAC;YAAEP,OAAO,EAAE;UAAU,CAAC,CAAC,CAAE;QACpC,CAAC,CAAC;MACF,CAAC,CAAC,OAAOH,KAAK,EAAE;QAChB;QACA;QACA,IAAIA,KAAK,CAACW,IAAI,KAAK,IAAI,EAAE;UACvB,IAAI;YACJ,MAAMnB,MAAM,CAACD,QAAQ,CAACI,OAAO,CAAC;cAC5BC,MAAM,EAAE,yBAAyB;cACjCc,MAAM,EAAE,CACR;gBACEP,OAAO,EAAE,SAAS;gBAClBS,SAAS,EAAE,wBAAwB;gBACnCC,OAAO,EAAE,CAAC,oCAAoC,CAAC;gBAC/CC,cAAc,EAAE;kBACdC,IAAI,EAAE,cAAc;kBACpBC,MAAM,EAAE,OAAO;kBACfC,QAAQ,EAAE;gBACZ,CAAC;gBACDC,iBAAiB,EAAE,CAAC,iCAAiC;cACvD,CAAC;YAEH,CAAC,CAAC;UACF,CAAC,CAAC,OAAOlB,KAAK,EAAE;YAChBF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;UAClB;QACF;QACAF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;MAClB;IACF,CAAC,MAAM;MACL;MACAP,KAAK,CAAC,iGAAiG,CAAC;IAC1G;EACA,CAAC;EAEH,MAAM0B,IAAI,GAAG,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAM5B,QAAQ,GAAGC,MAAM,CAACD,QAAQ;MAGhC,IAAIA,QAAQ,EAAE;QACZ,MAAM6B,QAAQ,GAAG,IAAI9C,MAAM,CAAC+C,SAAS,CAACC,YAAY,CAAC/B,QAAQ,CAAC;QAC5D,MAAMgC,MAAM,GAAGH,QAAQ,CAACI,SAAS,CAAC,CAAC;QACnC,MAAMC,kBAAkB,GAAG,IAAInD,MAAM,CAACoD,QAAQ,CAAC3C,eAAe,EAAEC,WAAW,EAAEuC,MAAM,CAAC;QAEpF,MAAMI,MAAM,GAAGC,MAAM,CAAC,iBAAiB,CAAC;QACxC,MAAMC,OAAO,GAAG,MAAMJ,kBAAkB,CAACN,IAAI,CAACQ,MAAM,CAAC;QAErD7B,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE8B,OAAO,CAACC,IAAI,CAAC;QAEtC,MAAMD,OAAO,CAACE,IAAI,CAAC,CAAC;QACpBjC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE8B,OAAO,CAACC,IAAI,CAAC;QAEtCrC,KAAK,CAAC,uBAAuB,CAAC;MAChC,CAAC,MAAM;QACLK,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC/C;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;MAClBP,KAAK,CAAC,iCAAiC,CAAC;IAC1C;EACF,CAAC;EAED,MAAMuC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAM;MAAEzC;IAAS,CAAC,GAAGC,MAAM;IAE3B,IAAI;MACF,IAAID,QAAQ,EAAE;QACZ,MAAM6B,QAAQ,GAAG,IAAI9C,MAAM,CAAC+C,SAAS,CAACC,YAAY,CAAC/B,QAAQ,CAAC;QAC5D,MAAMgC,MAAM,GAAGH,QAAQ,CAACI,SAAS,CAAC,CAAC;QACnC,MAAMC,kBAAkB,GAAG,IAAInD,MAAM,CAACoD,QAAQ,CAAC3C,eAAe,EAAEC,WAAW,EAAEuC,MAAM,CAAC;QACpF,MAAMU,KAAK,GAAG,MAAMR,kBAAkB,CAACS,WAAW,CAAC,CAAC;QAEpD,MAAMC,UAAU,GAAGF,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;QAElC,MAAMC,YAAY,GAAGF,UAAU,CAACG,GAAG,CAACnB,IAAI,IAAI;UAC1C,OAAO;YACLoB,OAAO,EAAEpB,IAAI,CAACqB,KAAK;YACnBC,SAAS,EAAE,IAAIC,IAAI,CAACvB,IAAI,CAACsB,SAAS,GAAG,IAAI,CAAC;YAC1CE,OAAO,EAAExB,IAAI,CAACwB;UAChB,CAAC;QACH,CAAC,CAAC;QAEFzD,WAAW,CAACmD,YAAY,CAAC;MAC3B,CAAC,MAAM;QACLvC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC/C;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACpB;EACF,CAAC;EAED,MAAM4C,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,MAAMZ,WAAW,CAAC,CAAC;EACrB,CAAC;EAED,MAAMa,UAAU,GAAGA,CAAA,KAAM;IACvB3D,WAAW,CAAC,EAAE,CAAC;EACjB,CAAC;EAEDd,SAAS,CAAC,MAAM;IACd,IAAIqD,kBAAkB;IAEtB,MAAMqB,SAAS,GAAGA,CAACC,IAAI,EAAEN,SAAS,EAAEE,OAAO,KAAK;MAC9C7C,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEgD,IAAI,EAAEN,SAAS,EAAEE,OAAO,CAAC;MAChDzD,WAAW,CAAC8D,SAAS,IAAI,CACvB,GAAGA,SAAS,EACZ;QACET,OAAO,EAAEQ,IAAI;QACbN,SAAS,EAAE,IAAIC,IAAI,CAACD,SAAS,GAAG,IAAI,CAAC;QACrCE,OAAO,EAAEA;MACX,CAAC,CACF,CAAC;IACJ,CAAC;IAED,MAAMM,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAIzD,MAAM,CAACD,QAAQ,EAAE;QACnB,MAAM6B,QAAQ,GAAG,IAAI9C,MAAM,CAAC+C,SAAS,CAACC,YAAY,CAAC9B,MAAM,CAACD,QAAQ,CAAC;QACnE,MAAMgC,MAAM,GAAGH,QAAQ,CAACI,SAAS,CAAC,CAAC;QAEnCC,kBAAkB,GAAG,IAAInD,MAAM,CAACoD,QAAQ,CAAC3C,eAAe,EAAEC,WAAW,EAAEuC,MAAM,CAAC;QAC9EE,kBAAkB,CAACrB,EAAE,CAAC,SAAS,EAAE0C,SAAS,CAAC;MAC7C;IACF,CAAC;IAED,CAAC,YAAY;MACX,MAAMjD,OAAO,GAAG,MAAMP,aAAa,CAAC,CAAC;MACrC,MAAM2D,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC,EAAE,CAAC;;IAEJ,OAAO,MAAM;MACX,IAAIxB,kBAAkB,EAAE;QACtBA,kBAAkB,CAACyB,GAAG,CAAC,SAAS,EAAEJ,SAAS,CAAC;MAC9C;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN1E,SAAS,CAAC,MAAM;IACd6B,wBAAwB,CAAC,CAAC;EAC5B,CAAC,EAAE,CAACd,OAAO,CAAC,CAAC;EAGb,oBACET,OAAA;IAAKyE,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC5B1E,OAAA;MAAKyE,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5B1E,OAAA;QAAKyE,SAAS,EAAC,QAAQ;QAAAC,QAAA,EAAC;MAExB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAEN9E,OAAA;QAAKyE,SAAS,EAAC,KAAK;QAAAC,QAAA,EAAC;MAErB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAEN9E,OAAA;QAAQyE,SAAS,EAAC,YAAY;QAACM,OAAO,EAAEtC,IAAK;QAAAiC,QAAA,EAAC;MAE9C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAET9E,OAAA;QAAQyE,SAAS,EAAC,YAAY;QAACM,OAAO,EAAEb,qBAAsB;QAAAQ,QAAA,EAAC;MAE/D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAERvE,QAAQ,CAACiB,MAAM,GAAG,CAAC,iBAClBxB,OAAA;QAAQyE,SAAS,EAAC,YAAY;QAACM,OAAO,EAAEZ,UAAW;QAAAO,QAAA,EAAC;MAEpD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACT,EAEA,CAAC3E,cAAc,iBACdH,OAAA;QAAQyE,SAAS,EAAC,YAAY;QAACM,OAAO,EAAEnE,aAAc;QAAA8D,QAAA,EAAC;MAEvD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACT,EAEAnE,+BAA+B,iBAC9BX,OAAA;QAAKyE,SAAS,EAAC,0BAA0B;QAAAC,QAAA,gBACvC1E,OAAA;UAAA0E,QAAA,EAAG;QAAwC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAC/C9E,OAAA;UAAQyE,SAAS,EAAC,wBAAwB;UAACM,OAAO,EAAEhD,aAAc;UAAA2C,QAAA,EAAC;QAEnE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CACN,EAEAvE,QAAQ,CAACqD,GAAG,CAAC,CAACnB,IAAI,EAAEuC,KAAK,kBACxBhF,OAAA;QAAiBiF,KAAK,EAAE;UAAEC,eAAe,EAAE,MAAM;UAAEC,SAAS,EAAE,MAAM;UAAEC,OAAO,EAAE;QAAM,CAAE;QAAAV,QAAA,gBACrF1E,OAAA;UAAA0E,QAAA,GAAK,WAAS,EAACjC,IAAI,CAACoB,OAAO;QAAA;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAClC9E,OAAA;UAAA0E,QAAA,GAAK,QAAM,EAACjC,IAAI,CAACsB,SAAS,CAACsB,QAAQ,CAAC,CAAC;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC5C9E,OAAA;UAAA0E,QAAA,GAAK,WAAS,EAACjC,IAAI,CAACwB,OAAO;QAAA;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA,GAH1BE,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIV,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAA5E,EAAA,CAjQKD,GAAG;AAAAqF,EAAA,GAAHrF,GAAG;AAmQT,eAAeA,GAAG;AAAC,IAAAqF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}